rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(resource) {
      return isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Users cannot delete their accounts through client
    }
    
    // Agents collection
    match /agents/{agentId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Tools collection
    match /tools/{toolId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Phone Numbers collection
    match /phoneNumbers/{phoneId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Calls collection
    match /calls/{callId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if true; // LiveKit server can create calls
      allow update: if true; // LiveKit server can update call status
      allow delete: if false; // Calls should not be deleted
    }
    
    // Appointments collection (for booking tools)
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if true; // Tools can create appointments
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Leads collection (for customer inquiries)
    match /leads/{leadId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if true; // Tools can create leads
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Transcripts collection (for call transcripts)
    match /transcripts/{transcriptId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if true; // LiveKit server can create transcripts
      allow update: if true; // LiveKit server can update transcripts
      allow delete: if false; // Transcripts should not be deleted
    }
    
    // Workflows collection
    match /workflows/{workflowId} {
      allow read: if isAuthenticated() && (isOwner(resource) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource);
      allow delete: if isAuthenticated() && isOwner(resource);
    }
  }
}